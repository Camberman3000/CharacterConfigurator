<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Yv++mWL/vZli/72ZYv++mWL/wJtj/8CbY/+WeUz/eGA8/1xJLf9BNB//LyYX/xMPCP9gUkH//tms//3j
        s///5bX//+Gy//7gsf/xzqP/+daq///mt//+267+27uU/xIPDOoAAAATAAAAAAAAAAMAAAAAAAAAYBAN
        CP9wWTj+pIRU/6eGVf+ti1n/rYtZ/6eGVf+oh1b/qolX/7OQXP+4lF//u5dg/7mVYP+8l2H/jHBG/xwY
        Ev/aupT/b19L/19SQP9lVkT/b15L/+/Nov/Nr4r/alM9/9CyjP7kxJv/EA0L6gAAABMAAAAAAwMCAQAA
        AAAAAAASCwkH7TAqIv8jHRb+LSYc/xIPCv8RDwr/LSYc/yMdFf8bFxD/HBgR/xsXEf8bFhD/GxYQ/x4Z
        Ev8TEAv/e2lT//LPpP+DcFn/eWhS/2ZXRf9xYU3/4sGY/ywpIv8dQVD/Lysk/ti4kf8TEQ3qAAAAEwAA
        AAAAAAABAAAAAAAAABMSEA3u7Muh/9i5kv46Myr/BQQD/wUEA/87NCv/za+L/+TDm//bvJX/3b2W/929
        lv/dvZb/3LyW/+HAmf/82Kv/6sif/4JvWP+DcVn/9tmr///jtP/syZ//KiYh/x5BUP8uKyT+2LiR/xMR
        DeoAAAATAAAAAAAAAAEAAAAAAAAAERIQDO7aupP/NS4l/iMSBf9uRyT/bkck/yQTBv8xKyP/9NGl//fT
        p//10qb/9tKm//bSpv/20qb/9NGl//HOo//nxZz/aVpH/2laR//jwpr/7cqg//jUqP/LrYn/alQ9/9Cx
        jP7kxJv/EA0L6gAAABMAAAAAAAAAAQAAAAAAAAARIx4X7oZ0Xf8YDQX+hFUt/3pOKP96Tij/hVYt/xMK
        Av+ZhGn//9ut/+3KoP/wzaL/8M2i//DNov/wzaL/8c6j//fTp///5LX//+S0//fUqP/20qb/8M2i//nX
        qv//5rf//tuu/tu7lP8SDwzqAAAAEwAAAAAAAAABAAAAAAAAABEmIBnuY1ZG/zMfDf6BUyv/c0om/3NK
        Jv+CVCz/LxsK/3VmUv//3q//7cug//HOo//xzqP/8c6j//HOo//wzaL/3b2V/9e4kf/YuJL/3LyV/929
        lv/xzqP/5cOb/9a1jv/qyJ7+3r6X/xEPDOoAAAATAAAAAAAAAAEAAAAAAAAAESMeF+6HdF3/GA4F/oVW
        Lf97Tyn/e08p/4dXLv8UCgL/mYRq///brf/uy6H/8c6j//HOo//wzaL/9dGl/+PCmv80LCP/Ix4X/ygi
        G/8dGRP/Misi/9i5kv8uKCD/DxQV/y8pIf7StI7/FRIO6gAAABMAAAAAAAAAAQAAAAAAAAARExAN7tq6
        k/8yKyP+Hg4C/2hBIP9oQSD/Hw8D/y0oIP/uy6H/8c6j/+/Mov/wzaL/8M2i//DNov/xzqP/7cug/8qs
        iP/GqYb/yKuI/9i5kv/iwZn/3LqS/xwfHv9alqv/ICIg/smqhf8XFBDqAAAAEwAAAAAAAAABAAAAAAAA
        ABEQDgvs58ad/+nJn/1TSDr+HRgS/h0YEv5USTv+5MSb/vzYq/710aX+9tOn/vbTp/7206f+9dKm/vrW
        qf7ox53+OTEn/iMeGP46MSf+7cqg/v/crv7ryZ/+Lykh/hUZGf40LST917iR/xUSDugAAAASAAAAAAAA
        AAEAAAAAAAAAEREOC+7Iq4j/5sWc/uvJnv/Rs47/0bOO/+zJn//iwZn/27uU/929lv/dvZX/3b2V/929
        lf/dvZX/3b2W/9u7lP/JrIj/x6qG/8msiP/au5T/3LyV/96+lv/Ss47/x6iE/9e4kf7Mror/EA0L6gAA
        ABMAAAAAAAAAAQAAAAAAAAALAQEB0hAOC+8QDgvoDgwK6hUSDuoVEg7qDgwK6hAOC+oSDwzqEg8M6hIP
        DOoSDwzqEg8M6hIPDOoRDwzqEg8M6hcUD+oXFBDqFxQP6hIPDOoSDwzqEQ8M6hUSDuoXFBDqFRIO6BAN
        C/ABAQHOAAAADAAAAAAAAAAAAAAAAAAAAAAAAAANAAAAFAAAABIAAAATAAAAEwAAABMAAAATAAAAEwAA
        ABMAAAATAAAAEwAAABMAAAATAAAAEwAAABMAAAATAAAAEwAAABMAAAATAAAAEwAAABMAAAATAAAAEwAA
        ABMAAAASAAAAFAAAAA0AAAAA6AX//+gF///oBf//6AX//+gF///oBf//6AX//+gF//+IBf//KAT//4gE
        AAGAAv/0AAAAAQAAAACAAAAAgAAAAIAAAACAAAAAQAAAAEAAAACgAAAAIAAAACAAAACgAAAAoAAAAKAA
        AACgAAAAoAAAAKAAAACgAAAAoAAAAJAAAAE=
</value>
  </data>
</root>